; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=amdgcn -verify-machineinstrs -stop-after=finalize-isel | FileCheck %s

define amdgpu_kernel void @illegal_vgpr_to_sgpr_copy_i32() #0 {
  ; CHECK-LABEL: name: illegal_vgpr_to_sgpr_copy_i32
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   INLINEASM &"; def $0", 1 /* sideeffect attdialect */, 10 /* regdef */, implicit-def $vgpr1
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr1
  ; CHECK-NEXT:   $sgpr9 = V_READFIRSTLANE_B32 [[COPY]], implicit $exec
  ; CHECK-NEXT:   INLINEASM &"; use $0", 1 /* sideeffect attdialect */, 9 /* reguse */, $sgpr9
  ; CHECK-NEXT:   S_ENDPGM 0
  %vgpr = call i32 asm sideeffect "; def $0", "=${v1}"()
  call void asm sideeffect "; use $0", "${s9}"(i32 %vgpr)
  ret void
}

define amdgpu_kernel void @illegal_vgpr_to_sgpr_copy_v2i32() #0 {
  ; CHECK-LABEL: name: illegal_vgpr_to_sgpr_copy_v2i32
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   INLINEASM &"; def $0", 1 /* sideeffect attdialect */, 10 /* regdef */, implicit-def $vgpr0_vgpr1
  ; CHECK-NEXT:   $sgpr10 = V_READFIRSTLANE_B32 $vgpr0, implicit $exec, implicit $vgpr0_vgpr1, implicit-def $sgpr10_sgpr11
  ; CHECK-NEXT:   $sgpr11 = V_READFIRSTLANE_B32 $vgpr1, implicit $exec, implicit killed $vgpr0_vgpr1
  ; CHECK-NEXT:   INLINEASM &"; use $0", 1 /* sideeffect attdialect */, 9 /* reguse */, $sgpr10_sgpr11
  ; CHECK-NEXT:   S_ENDPGM 0
  %vgpr = call <2 x i32> asm sideeffect "; def $0", "=${v[0:1]}"()
  call void asm sideeffect "; use $0", "${s[10:11]}"(<2 x i32> %vgpr)
  ret void
}

define amdgpu_kernel void @illegal_vgpr_to_sgpr_copy_v4i32() #0 {
  ; CHECK-LABEL: name: illegal_vgpr_to_sgpr_copy_v4i32
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   INLINEASM &"; def $0", 1 /* sideeffect attdialect */, 10 /* regdef */, implicit-def $vgpr0_vgpr1_vgpr2_vgpr3
  ; CHECK-NEXT:   $sgpr8 = V_READFIRSTLANE_B32 $vgpr0, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3, implicit-def $sgpr8_sgpr9_sgpr10_sgpr11
  ; CHECK-NEXT:   $sgpr9 = V_READFIRSTLANE_B32 $vgpr1, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3
  ; CHECK-NEXT:   $sgpr10 = V_READFIRSTLANE_B32 $vgpr2, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3
  ; CHECK-NEXT:   $sgpr11 = V_READFIRSTLANE_B32 $vgpr3, implicit $exec, implicit killed $vgpr0_vgpr1_vgpr2_vgpr3
  ; CHECK-NEXT:   INLINEASM &"; use $0", 1 /* sideeffect attdialect */, 9 /* reguse */, $sgpr8_sgpr9_sgpr10_sgpr11
  ; CHECK-NEXT:   S_ENDPGM 0
  %vgpr = call <4 x i32> asm sideeffect "; def $0", "=${v[0:3]}"()
  call void asm sideeffect "; use $0", "${s[8:11]}"(<4 x i32> %vgpr)
  ret void
}

define amdgpu_kernel void @illegal_vgpr_to_sgpr_copy_v8i32() #0 {
  ; CHECK-LABEL: name: illegal_vgpr_to_sgpr_copy_v8i32
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   INLINEASM &"; def $0", 1 /* sideeffect attdialect */, 10 /* regdef */, implicit-def $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
  ; CHECK-NEXT:   $sgpr8 = V_READFIRSTLANE_B32 $vgpr0, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, implicit-def $sgpr8_sgpr9_sgpr10_sgpr11_sgpr12_sgpr13_sgpr14_sgpr15
  ; CHECK-NEXT:   $sgpr9 = V_READFIRSTLANE_B32 $vgpr1, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
  ; CHECK-NEXT:   $sgpr10 = V_READFIRSTLANE_B32 $vgpr2, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
  ; CHECK-NEXT:   $sgpr11 = V_READFIRSTLANE_B32 $vgpr3, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
  ; CHECK-NEXT:   $sgpr12 = V_READFIRSTLANE_B32 $vgpr4, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
  ; CHECK-NEXT:   $sgpr13 = V_READFIRSTLANE_B32 $vgpr5, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
  ; CHECK-NEXT:   $sgpr14 = V_READFIRSTLANE_B32 $vgpr6, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
  ; CHECK-NEXT:   $sgpr15 = V_READFIRSTLANE_B32 $vgpr7, implicit $exec, implicit killed $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
  ; CHECK-NEXT:   INLINEASM &"; use $0", 1 /* sideeffect attdialect */, 9 /* reguse */, $sgpr8_sgpr9_sgpr10_sgpr11_sgpr12_sgpr13_sgpr14_sgpr15
  ; CHECK-NEXT:   S_ENDPGM 0
  %vgpr = call <8 x i32> asm sideeffect "; def $0", "=${v[0:7]}"()
  call void asm sideeffect "; use $0", "${s[8:15]}"(<8 x i32> %vgpr)
  ret void
}

define amdgpu_kernel void @illegal_vgpr_to_sgpr_copy_v16i32() #0 {
  ; CHECK-LABEL: name: illegal_vgpr_to_sgpr_copy_v16i32
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   INLINEASM &"; def $0", 1 /* sideeffect attdialect */, 10 /* regdef */, implicit-def $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr16 = V_READFIRSTLANE_B32 $vgpr0, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15, implicit-def $sgpr16_sgpr17_sgpr18_sgpr19_sgpr20_sgpr21_sgpr22_sgpr23_sgpr24_sgpr25_sgpr26_sgpr27_sgpr28_sgpr29_sgpr30_sgpr31
  ; CHECK-NEXT:   $sgpr17 = V_READFIRSTLANE_B32 $vgpr1, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr18 = V_READFIRSTLANE_B32 $vgpr2, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr19 = V_READFIRSTLANE_B32 $vgpr3, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr20 = V_READFIRSTLANE_B32 $vgpr4, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr21 = V_READFIRSTLANE_B32 $vgpr5, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr22 = V_READFIRSTLANE_B32 $vgpr6, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr23 = V_READFIRSTLANE_B32 $vgpr7, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr24 = V_READFIRSTLANE_B32 $vgpr8, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr25 = V_READFIRSTLANE_B32 $vgpr9, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr26 = V_READFIRSTLANE_B32 $vgpr10, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr27 = V_READFIRSTLANE_B32 $vgpr11, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr28 = V_READFIRSTLANE_B32 $vgpr12, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr29 = V_READFIRSTLANE_B32 $vgpr13, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr30 = V_READFIRSTLANE_B32 $vgpr14, implicit $exec, implicit $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   $sgpr31 = V_READFIRSTLANE_B32 $vgpr15, implicit $exec, implicit killed $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
  ; CHECK-NEXT:   INLINEASM &"; use $0", 1 /* sideeffect attdialect */, 9 /* reguse */, $sgpr16_sgpr17_sgpr18_sgpr19_sgpr20_sgpr21_sgpr22_sgpr23_sgpr24_sgpr25_sgpr26_sgpr27_sgpr28_sgpr29_sgpr30_sgpr31
  ; CHECK-NEXT:   S_ENDPGM 0
  %vgpr = call <16 x i32> asm sideeffect "; def $0", "=${v[0:15]}"()
  call void asm sideeffect "; use $0", "${s[16:31]}"(<16 x i32> %vgpr)
  ret void
}

define amdgpu_kernel void @illegal_agpr_to_sgpr_copy_i32() #1 {
  ; CHECK-LABEL: name: illegal_agpr_to_sgpr_copy_i32
  ; CHECK: bb.0 (%ir-block.0):
  ; CHECK-NEXT:   INLINEASM &"; def $0", 1 /* sideeffect attdialect */, 10 /* regdef */, implicit-def $agpr1
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vgpr_32 = COPY $agpr1
  ; CHECK-NEXT:   $sgpr9 = V_READFIRSTLANE_B32 [[COPY]], implicit $exec
  ; CHECK-NEXT:   INLINEASM &"; use $0", 1 /* sideeffect attdialect */, 9 /* reguse */, $sgpr9
  ; CHECK-NEXT:   S_ENDPGM 0
  %agpr = call i32 asm sideeffect "; def $0", "=${a1}"()
  call void asm sideeffect "; use $0", "${s9}"(i32 %agpr)
  ret void
}

attributes #0 = { nounwind }
attributes #1 = { nounwind "target-cpu"="gfx908" }
